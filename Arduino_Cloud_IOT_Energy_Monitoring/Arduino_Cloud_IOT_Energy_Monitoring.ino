#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/333b3b19-7253-48b4-90ba-8bfd19ab170b

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudElectricCurrent current;
  CloudElectricPotential voltage;
  CloudPower power;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example


#include <ZMPT101B.h>

#define SENSITIVITY 553.0f // Voltage calibaration value

// ZMPT101B sensor output connected to analog pin A0
// and the voltage source frequency is 50 Hz.
ZMPT101B voltageSensor(34, 50.0);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();
  display.display();

  analogSetPinAttenuation(35, ADC_0db);
  // Change the sensitivity value based on value you got from the calibrate
  // example.
  voltageSensor.setSensitivity(SENSITIVITY);
}

void loop() {
  ArduinoCloud.update();

  // read the voltage and then print via Serial.

  int a = 0;
  for (int j = 0; j < 1024; j++) {
    a += analogRead(35);
  }

  //Serial.println(a/1024);
  a = (a / 1024) - 1614;
  if (a < 2)
  {
    a = 0;
  }
  float volt = voltageSensor.getRmsVoltage();
  Serial.print("Voltage : ");
  Serial.print(volt);
  float AMPv = ((float(a) / 4095.0) * 43.0);

  Serial.print("V  Current : ");
  Serial.print(AMPv, 3 );
  Serial.print("I  Power : ");
  Serial.print(volt * AMPv );
  Serial.println("W");


  // Displaying Data on OLED Screen
  
  display.clearDisplay();

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0, 0);            // Start at top-left corner

  display.print(F("   IOT Energy Meter  "));
  display.println(F("     "));
  display.println(F("     ")); 
  display.print(F("Voltage - ")); display.print(volt); display.println(F(" V"));
  display.print(F("Current - ")); display.print(AMPv);display.println(F(" A"));
  display.print(F("Power   - ")); display.print(volt * AMPv );display.println(F(" W"));
  display.display();

  // Sending Data To Cloud 
  current = AMPv;
  voltage = volt;
  power = volt * AMPv;




  delay(500);
  // Your code here


}



/*
  Since Voltage is READ_WRITE variable, onVoltageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVoltageChange()  {
  // Add your code here to act upon Voltage change
}

/*
  Since Current is READ_WRITE variable, onCurrentChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCurrentChange()  {
  // Add your code here to act upon Current change
}

/*
  Since Power is READ_WRITE variable, onPowerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPowerChange()  {
  // Add your code here to act upon Power change
}
